#pragma once
#include <cstdint>

namespace ME
{
enum class ERHIBufferUsage
{
    RHI_BUFFER_USAGE_TRANSFER_SRC_BIT,
    RHI_BUFFER_USAGE_TRANSFER_DST_BIT,
    RHI_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT,
    RHI_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT,
    RHI_BUFFER_USAGE_UNIFORM_BUFFER_BIT,
    RHI_BUFFER_USAGE_STORAGE_BUFFER_BIT,
    RHI_BUFFER_USAGE_INDEX_BUFFER_BIT,
    RHI_BUFFER_USAGE_VERTEX_BUFFER_BIT,
    RHI_BUFFER_USAGE_INDIRECT_BUFFER_BIT,
    RHI_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT,
    RHI_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT,
    RHI_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT,
    RHI_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT,
    RHI_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR,
    RHI_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR,
    RHI_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR,
    RHI_BUFFER_USAGE_RAY_TRACING_BIT_NV,
    RHI_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT,
    RHI_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR,
    RHI_BUFFER_USAGE_FLAG_BITS_MAX_ENUM
};

struct RHIBufferCreateDesc
{
    ERHIBufferUsage BufferUsage = ERHIBufferUsage::RHI_BUFFER_USAGE_TRANSFER_SRC_BIT;
    uint64_t BufferSize = 0;
    void* Data = nullptr;
};

struct RHIBuffer
{
    virtual ~RHIBuffer() = default;
};

}  //namespace ME